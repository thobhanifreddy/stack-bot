{"version":3,"sources":["components/question/index.tsx","components/questions/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Question","props","state","showModal","question","this","Fragment","Item","onClick","setState","style","cursor","Meta","avatar","src","owner","profile_image","margin","title","description","display","justifyContent","marginRight","display_name","moment","unix","creation_date","fromNow","window","open","link","Title","level","visible","okText","onOk","onCancel","width","bodyStyle","height","overflowY","dangerouslySetInnerHTML","__html","body","React","Component","Questions","componentDidMount","fetchQuestions","page","addEventListener","a","disatanceScrolled","innerHeight","document","documentElement","scrollTop","totalHeight","scrollHeight","console","log","fetched","loading","fetch","response","json","fetchedQuestions","items","questions","concat","outOfQuota","message","length","itemLayout","dataSource","renderItem","App","ghost","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e97fb643.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Avatar, Modal, Typography } from \"antd\";\nimport moment from \"moment\";\n\ninterface QurstionPropsInterface {\n  question: any;\n  loading: boolean;\n}\n\ninterface QurstionStateInterface {\n  showModal: boolean;\n}\n\nclass Question extends React.Component<\n  QurstionPropsInterface,\n  QurstionStateInterface\n> {\n  constructor(props: QurstionPropsInterface) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n  }\n\n  render() {\n    const { question } = this.props;\n    return (\n      <React.Fragment>\n        <List.Item\n          onClick={() => this.setState({ showModal: true })}\n          style={{ cursor: \"pointer\" }}\n        >\n          <List.Item.Meta\n            avatar={\n              <Avatar\n                src={question.owner.profile_image}\n                style={{ margin: 10 }}\n              />\n            }\n            title={question.title}\n            description={\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  marginRight: 20\n                }}\n              >\n                <p>{question.owner.display_name}</p>\n                <p>{moment.unix(question.creation_date).fromNow()}</p>\n              </div>\n            }\n          />\n        </List.Item>\n        <Modal\n          title={\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => window.open(question.link)}\n            >\n              {\" \"}\n              <Typography.Title level={3}>\n                {question.title}\n              </Typography.Title>{\" \"}\n            </div>\n          }\n          visible={this.state.showModal}\n          okText={\"Go To Stackoverflow\"}\n          onOk={() => window.open(question.link)}\n          onCancel={() => this.setState({ showModal: false })}\n          width={700}\n          bodyStyle={{ height: 400, overflowY: \"scroll\" }}\n        >\n          <div dangerouslySetInnerHTML={{ __html: question.body }}></div>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Question;\n","import React from \"react\";\nimport { List, Avatar } from \"antd\";\nimport Question from \"../question\";\nimport { timeout } from \"q\";\n\ninterface QuestionsStateInterface {\n  questions: Array<any>;\n  loading: boolean;\n  outOfQuota: boolean;\n  page: number;\n  fetched:  boolean;\n}\n\nclass Questions extends React.Component<any, QuestionsStateInterface> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      questions: [],\n      loading: false,\n      page: 1,\n      outOfQuota: false,\n      fetched: false\n    };\n  }\n\n  componentDidMount = () => {\n    this.fetchQuestions(this.state.page);\n\n\n    window.addEventListener(\"scroll\", async () => {\n      let disatanceScrolled: number = window.innerHeight + document.documentElement.scrollTop \n      let totalHeight: number = document.documentElement.scrollHeight\n      console.log((disatanceScrolled > totalHeight    /  2 && disatanceScrolled !== totalHeight) || this.state.fetched);\n      if ((disatanceScrolled > totalHeight    /  2 && disatanceScrolled !== totalHeight) || this.state.fetched)\n      {\n        return;\n      }\n        \n      this.setState({ page: this.state.page + 1, fetched: true });\n      await this.fetchQuestions(this.state.page);\n      if(this.state.fetched) {\n        this.setState({fetched: false}) \n  \n      }\n    });\n\n    \n  };\n\n  fetchQuestions = async (page: number) => {\n    this.setState({ loading: true });\n    try {\n    const response = await fetch(\n      `https://api.stackexchange.com/2.2/questions?page=${page}&pagesize=20&order=desc&sort=creation&site=stackoverflow&filter=withBody`\n    );\n    let fetchedQuestions = await response.json();\n    if (fetchedQuestions.items) {\n      fetchedQuestions = fetchedQuestions.items;\n    let questions = this.state.questions.concat(fetchedQuestions);\n    this.setState({ questions, loading: false });\n    } else {\n      this.setState({outOfQuota: true, loading: false})\n    }\n    } catch(error) {\n      console.log(error.message)\n      this.setState({outOfQuota: true, loading: false})\n    }\n  };\n  \n\n  render() {\n    const { questions, loading, outOfQuota } = this.state;\n    console.log(outOfQuota);\n\n    if (loading && questions.length === 0 ) return <></>\n    if(outOfQuota) return <h3>Sorry, You have corssed the quota</h3>\n    return (\n      questions && (\n        <List\n          itemLayout=\"horizontal\"\n          dataSource={questions}\n          renderItem={question => (\n            <Question loading={loading} question={question} />\n            \n            \n          )}\n        />\n      \n      )\n    );\n  }\n}\n\nexport default Questions;\n","import React from \"react\";\nimport { PageHeader } from 'antd';\nimport './App.css';\n\nimport Questions from \"./components/questions\";\n\n\n\nconst App: React.FC = () => {\n  return (\n    <div>\n        <PageHeader \n            ghost={false}\n            title=\"Stack Bot\" />\n        <Questions />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}